Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/jupyter_cache/executors/utils.py", line 56, in single_nb_execution
    record_timing=False,
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 1117, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/util.py", line 78, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/util.py", line 57, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/asyncio/base_events.py", line 587, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 559, in async_execute
    cell, index, execution_count=self.code_cells_executed + 1
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 862, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/nbclient/client.py", line 765, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
#####################
# CHANGE here to make different waves and watch the velocity change
w = 5.0
k = 1.0
#####################

# Thanks to http://jakevdp.github.io/blog/2013/05/12/embedding-matplotlib-animations/ and http://louistiao.me/posts/notebooks/embedding-matplotlib-animations-in-jupyter-notebooks/
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import animation, rc
from IPython.display import HTML
from ipywidgets import interact

# First set up the figure, the axis, and the plot element we want to animate
fig, ax = plt.subplots(); ax.set_xlim(( 0, 10)); ax.set_ylim((-2, 2)); line, = ax.plot([], [], lw=2)

# initialization function: plot the background of each frame
def init():
    line.set_data([], []); return (line,)

# animation function. This is called sequentially
def animate(i):
    x = np.linspace(0, 10, 1000); y = np.sin(k * x - w * 0.05 * i); line.set_data(x, y); return (line,)

# call the animator. blit=True means only re-draw the parts that have changed.
anim = animation.FuncAnimation(fig, animate, init_func=init,frames=int(2*np.pi/w*40), interval=20, blit=True)
HTML(anim.to_html5_video())
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mRuntimeError[0m                              Traceback (most recent call last)
[0;32m/tmp/ipykernel_1618/3696982971.py[0m in [0;36m<module>[0;34m[0m
[1;32m     26[0m [0;31m# call the animator. blit=True means only re-draw the parts that have changed.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m     27[0m [0manim[0m [0;34m=[0m [0manimation[0m[0;34m.[0m[0mFuncAnimation[0m[0;34m([0m[0mfig[0m[0;34m,[0m [0manimate[0m[0;34m,[0m [0minit_func[0m[0;34m=[0m[0minit[0m[0;34m,[0m[0mframes[0m[0;34m=[0m[0mint[0m[0;34m([0m[0;36m2[0m[0;34m*[0m[0mnp[0m[0;34m.[0m[0mpi[0m[0;34m/[0m[0mw[0m[0;34m*[0m[0;36m40[0m[0;34m)[0m[0;34m,[0m [0minterval[0m[0;34m=[0m[0;36m20[0m[0;34m,[0m [0mblit[0m[0;34m=[0m[0;32mTrue[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 28[0;31m [0mHTML[0m[0;34m([0m[0manim[0m[0;34m.[0m[0mto_html5_video[0m[0;34m([0m[0;34m)[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m
[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/animation.py[0m in [0;36mto_html5_video[0;34m(self, embed_limit)[0m
[1;32m   1346[0m                 [0;31m# We create a writer manually so that we can get the[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1347[0m                 [0;31m# appropriate size for the tag[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1348[0;31m                 [0mWriter[0m [0;34m=[0m [0mwriters[0m[0;34m[[0m[0mmpl[0m[0;34m.[0m[0mrcParams[0m[0;34m[[0m[0;34m'animation.writer'[0m[0;34m][0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1349[0m                 writer = Writer(codec='h264',
[1;32m   1350[0m                                 [0mbitrate[0m[0;34m=[0m[0mmpl[0m[0;34m.[0m[0mrcParams[0m[0;34m[[0m[0;34m'animation.bitrate'[0m[0;34m][0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m

[0;32m/opt/hostedtoolcache/Python/3.7.11/x64/lib/python3.7/site-packages/matplotlib/animation.py[0m in [0;36m__getitem__[0;34m(self, name)[0m
[1;32m    149[0m         [0;32mif[0m [0mself[0m[0;34m.[0m[0mis_available[0m[0;34m([0m[0mname[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[1;32m    150[0m             [0;32mreturn[0m [0mself[0m[0;34m.[0m[0m_registered[0m[0;34m[[0m[0mname[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 151[0;31m         [0;32mraise[0m [0mRuntimeError[0m[0;34m([0m[0;34mf"Requested MovieWriter ({name}) not available"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    152[0m [0;34m[0m[0m
[1;32m    153[0m [0;34m[0m[0m

[0;31mRuntimeError[0m: Requested MovieWriter (ffmpeg) not available
RuntimeError: Requested MovieWriter (ffmpeg) not available

